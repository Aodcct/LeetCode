/*
思路

映入脑海的第一个想法是将数字转换为字符串，并检查字符串是否为回文。但是，这需要额外的非常量空间来创建问题描述中所不允许的字符串。

第二个想法是将数字本身反转，然后将反转后的数字与原始数字进行比较，如果它们是相同的，那么这个数字就是回文。但是，如果反转后的数字大于 \text{int.MAX}int.MAX，我们将遇到整数溢出问题。

CASE：
123456
6 12345
65 1234
654 123

654321
1 65432
12 6543
123 654
1234 65

1234567
7 123456
76 12345
765 1234
7654 123

7654321
1 765432
12 76543
123 7654
1234 765
*/

class Solution {
public:
    bool isPalindrome(int x) {
        // 特殊情况：
        // 如上所述，当 x < 0 时，x 不是回文数。
        // 同样地，如果数字的最后一位是 0，为了使该数字为回文，
        // 则其第一位数字也应该是 0
        // 只有 0 满足这一属性
        if(x < 0 || (x % 10 == 0 && x != 0)) {
            return false;
        }
        
        int y = 0;
        while(x > y) {
            y = y * 10 + x % 10;
            x /= 10;
        }
        // 当 x > y 时，有4种情况 
        // 1.原数为偶数，原数不为回文数 ，x与y位数相同且x>y 或者 x位数比y多1位
        //
        // 2.原数为偶数，原数为回文数，x与y位数相同，且x=y
        // 3.原数为奇数，原数不为回文数，x位数比y多1位
        // 4.原数为奇数，原数为回文数，x位数比y多1位
        return x == y || x == y / 10;
    }
};
